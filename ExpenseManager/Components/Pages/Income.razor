@page "/income"
@using System.Text.Json

<h3>Total Income</h3>

<!-- Search and Filter Options -->
<div class="search-filter">
    <input type="text" @bind="searchQuery" placeholder="Search by Name" class="form-control" />
    <input type="date" @bind="selectedDate" class="form-control" />
    <button @onclick="SortByDate" class="btn-sort">Sort by Date</button>
</div>

<!-- Transactions Table -->
<div id="income-dashboard">
    @if (filteredIncomeTransactions.Count == 0)
    {
        <p>No income transactions to display.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Transaction Type</th>
                    <th>Notes</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var txn in filteredIncomeTransactions)
                {
                    <tr>
                        <td>@txn.TransactionId</td>
                        <td>@txn.Name</td>
                        <td>@txn.Amount</td>
                        <td>@txn.TransactionType</td>
                        <td>@txn.Notes</td>
                        <td>@txn.Date.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private string searchQuery = string.Empty;
    private DateTime? selectedDate = null;
    private bool sortDescending = true; // Start with descending order for date

    // Filtered income transactions
    private List<TransactionModel> filteredIncomeTransactions
    {
        get
        {
            // Filter transactions where the type is "Credit", matches the search query, and the selected date
            var filtered = transactions
                .Where(t => t.TransactionType == "Credit" &&
                            (string.IsNullOrEmpty(searchQuery) || t.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                            (!selectedDate.HasValue || t.Date.Date == selectedDate.Value.Date))
                .ToList();

            // Sort by date based on the sortDescending flag
            return sortDescending
                ? filtered.OrderByDescending(t => t.Date).ToList()
                : filtered.OrderBy(t => t.Date).ToList();
        }
    }

    // Toggle sorting by date
    private void SortByDate()
    {
        sortDescending = !sortDescending; // Toggle sorting order
    }

    protected override void OnInitialized()
    {
        var path = Path.Combine(FileSystem.AppDataDirectory, "transactions.json");

        if (File.Exists(path))
        {
            var json = File.ReadAllText(path);
            transactions = JsonSerializer.Deserialize<List<TransactionModel>>(json) ?? new List<TransactionModel>();

            // Ensure no null properties
            foreach (var txn in transactions)
            {
                txn.TransactionId ??= "Unknown";
                txn.Name ??= "Unnamed";
                txn.Notes ??= string.Empty;
                txn.TransactionType ??= "Unknown";
                txn.Date = txn.Date == default ? DateTime.Now : txn.Date;
            }
        }
    }

    // Transaction model
    public class TransactionModel
    {
        public string TransactionId { get; set; } = "Unknown";
        public string Name { get; set; } = "Unnamed";
        public decimal Amount { get; set; } = 0;
        public string TransactionType { get; set; } = "Unknown";
        public string Notes { get; set; } = string.Empty;
        public DateTime Date { get; set; } = DateTime.Now;
    }
}

<style>
    .search-filter {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

        .search-filter input {
            margin-right: 10px;
            padding: 8px;
            width: 100%;
            max-width: 300px;
        }

    .btn-sort {
        padding: 8px 15px;
        background-color: #c4a3cb;
        color: white;
        border: none;
        cursor: pointer;
    }

        .btn-sort:hover {
            background-color: #916b99;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }

    th {
        background-color: #c4a3cb;
    }

    .form-control {
        padding: 8px;
        width: 100%;
    }
</style>
