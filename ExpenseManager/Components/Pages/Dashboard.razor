@page "/dashboard"
@using System.Text.Json
@using System.Linq

<h3>Dashboard</h3>

<!-- Summary Section -->
<div id="summary-section">
    <div class="summary-box">
        <h4>Total Income</h4>
        <p>@TotalIncome.ToString("C")</p>
    </div>
    <div class="summary-box">
        <h4>Total Expense</h4>
        <p>@TotalExpense.ToString("C")</p>
    </div>
    <div class="summary-box">
        <h4>Total Debt</h4>
        <p>@TotalDebt.ToString("C")</p>
    </div>
</div>

<!-- Search and Sort Options -->
<div class="search-sort">
    <input type="text" @bind="searchQuery" placeholder="Search by Name" class="form-control" />
    <button @onclick="SortByDate" class="btn-sort">Sort by Date</button>
</div>

<h3>Transaction List</h3>
<!-- Transactions Table -->
<div id="transaction-dashboard">
    @if (filteredTransactions.Count == 0)
    {
        <p>No transactions to display.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Transaction ID</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Notes</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var txn in filteredTransactions)
                {
                    <tr>
                        <td>@txn.TransactionId</td>
                        <td>@txn.Name</td>
                        <td>@txn.Amount.ToString("C")</td>
                        <td>@txn.TransactionType</td>
                        <td>@txn.Notes</td>
                        <td>@txn.Date.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private string searchQuery = string.Empty;
    private bool sortDescending = true; // Start with descending order for date

    // Filtered transactions based on search query and valid data
    private List<TransactionModel> filteredTransactions
    {
        get
        {
            return transactions
                .Where(t =>
                    !string.IsNullOrWhiteSpace(t.Name) &&
                    !string.IsNullOrWhiteSpace(t.TransactionId) &&
                    (string.IsNullOrEmpty(searchQuery) || t.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
                .OrderByDescending(t => sortDescending ? t.Date : DateTime.MinValue)
                .ToList();
        }
    }

    // Total calculations
    private decimal TotalIncome => transactions
        .Where(t => t.TransactionType == "Credit")
        .Sum(t => t.Amount);

    private decimal TotalExpense => transactions
        .Where(t => t.TransactionType == "Debit")
        .Sum(t => t.Amount);

    private decimal TotalDebt => TotalExpense > TotalIncome ? TotalExpense - TotalIncome : 0;

    // Toggle sorting order by date
    private void SortByDate()
    {
        sortDescending = !sortDescending;
    }

    protected override void OnInitialized()
    {
        var path = Path.Combine(FileSystem.AppDataDirectory, "transactions.json");
        if (File.Exists(path))
        {
            var json = File.ReadAllText(path);
            transactions = JsonSerializer.Deserialize<List<TransactionModel>>(json) ?? new List<TransactionModel>();

            // Remove any incomplete or placeholder data
            transactions = transactions
                .Where(t => !string.IsNullOrWhiteSpace(t.Name) && !string.IsNullOrWhiteSpace(t.TransactionId))
                .ToList();
        }
    }

    public class TransactionModel
    {
        public string TransactionId { get; set; }
        public string Name { get; set; }
        public decimal Amount { get; set; }
        public string TransactionType { get; set; } // Debit or Credit
        public string Notes { get; set; }
        public DateTime Date { get; set; }
    }
}

<style>
    .summary-box {
        display: inline-block;
        width: 30%;
        padding: 15px;
        margin: 10px;
        text-align: center;
        background-color: #e2cee6;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .search-sort {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

        .search-sort input {
            margin-right: 10px;
            padding: 8px;
            width: 100%;
            max-width: 300px;
        }

    .btn-sort {
        padding: 8px 15px;
        background-color: #c4a3cb;
        color: white;
        border: none;
        cursor: pointer;
    }

        .btn-sort:hover {
            background-color: #916b99;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .form-control {
        padding: 8px;
        width: 100%;
    }
</style>
